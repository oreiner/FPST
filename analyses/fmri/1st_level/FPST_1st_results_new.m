%%analyze individual subject
%%subject number as string e.g. '2899' or '4643' etc. 
%%sequence = 'learning' or 'transfer'
%%derivates = 1 for time modulation, 1 for time & dispersion
%%model for learning phase:  'Qchosen', 'Qboth', 'Qboth_sided' or
%%'Qboth_sided_no_cue', (Qdelta is included in the Qboth suffix and is
%%automatically detected)
%%model for transfer phase:  'chooseavoid', 'winlose', 'Vrel'
%%analysis2 = for tranfer phase, e.g. 'null' or 'cross' for non cue events

%%Qboth sided means with pm [1,-1] for left/right choice  

function FPST_1st_results_new(subject, sequence, prefix, derivatives, model, analysis2)
	%%perform 1st level analysis with preprocessed Data
    %make sure learning phase runs, as no model is needed
    jobfile = ['FPST_1st_results_job_' sequence derivatives '.m'];
    pathmodel='';
    
    if not(exist('model','var'))
        model='';
    else 
        switch model
            case {'Qchosen' ,'Qchosen_PE_last' , 'Qchosen_Q_last', 'QchosenTest'}
                jobfile = ['FPST_1st_results_job_' sequence derivatives '_Qchosen.m'];
            case 'Qboth'
                jobfile = ['FPST_1st_results_job_' sequence derivatives '_Qboth.m'];
            case {'Qboth_sided', 'Qboth_sided_PE_last'}
                jobfile = ['FPST_1st_results_job_' sequence derivatives '_Qboth_sided.m']; 
            case 'Qboth_sided_no_cue'
                jobfile = ['FPST_1st_results_job_' sequence derivatives '_Qboth_sided_no_cue.m'];
            case {'Qboth_single_regressor','Qboth_single_regressor_Qs_last', 'Qboth_single_regressor_PE_last'}
                jobfile = ['FPST_1st_results_job_' sequence '_Qboth_single_regressor.m']; 
            case 'Qboth_sided_single_regressor'
                jobfile = ['FPST_1st_results_job_' sequence '_Qboth_single_sided_regressor.m']; 
           % case 
           %     jobfile = ['FPST_1st_results_job_' sequence '_Qboth_single_regressor_Qs_last.m'];
          %  case 
          %      jobfile = ['FPST_1st_results_job_' sequence '_Qboth_single_regressor_PE_last.m'];
        end
        if strcmp(sequence,'transfer')
            pathmodel=model;
        end
    end
    if not(exist('analysis2','var'))
        analysis2='';
    end
    
	%% set spm job	
	path = '[Home Directory]/results/fmri/1st_level';	
    %pathsub  = fullfile(path, ['long_cue' derivatives], subject, sequence, model, analysis2);
	%pathsub  = fullfile(path, [prefix derivatives], subject, sequence, pathmodel, analysis2);
    pathsub  = fullfile(path, sequence, [prefix derivatives], subject, pathmodel, analysis2);
    
    jobs = repmat(jobfile, 1, 1);
	inputs = cell(1, 1);
	count = 1;   
        
    %% spm settings	
	spm('defaults', 'fmri');
	spm_jobman('initcfg');

    %% set location of 1st_Level spm.mat
    inputs{count, 1} = {[pathsub '/SPM.mat']};	count = count+1;
    
    switch sequence
        case 'learning'
            j = str2num(derivatives(2));
            if contains(prefix,'side')
                %existence of parameter modulation choice_side changes weight vector length 
                k = 1 + j;
            else
                k=0;
            end
            if contains(prefix,'no_null')
                m = 1 + j;
            else 
                m=0;
            end
            switch model
                case 'Qchosen_Q_last'
                    switch derivatives(2)
                        case '1'
                            inputs = {inputs{:}, ...
                                %%add
                                 }';         
                        case '2'
                            inputs = {inputs{:}, ...
                                'cue',con_vector(19-m,19-m,0),'Qchosen',con_vector(22+k-m,22+k-m,0), ... %%k only needs to come after cue so here only at Qchosen
                                'Shake+',con_vector(7-m,7-m,0), 'S-',con_vector(13-m,13-m,0), ...
                                'S+>S-',con_vector(13-m,7-m,13-m),'S+<S-',con_vector(13-m,13-m,7-m), 'S+&S-',con_vector(13-m,[7-m 13-m],0), ...
                                'PE+',con_vector(10-m,10-m,0), 'PE-',con_vector(16-m,16-m,0), ...
                                'PE+>PE-',con_vector(16-m,10-m,16-m), 'PE+<PE-',con_vector(16-m,16-m,10-m), 'PE+&PE-',con_vector(16-m,[10-m 16-m], 0),  ... 
                                }'; 
                    end
                    if contains(prefix,'side')
                        %inputs = {inputs{:}, 'side (left/right cue)',
                        %con_vector(20+j,20+j,0)}'; % this is incorrect but
                        %deprecated anyway
                    end
                case 'Qchosen_PE_last'
                    switch derivatives(2)
                        case '1'
                            inputs = {inputs{:}, ...
                                %%update like case '2'
                                %'cue',con_vector(5-m,5-m,0),'Qchosen',con_vector(7+k-m,7+k-m,0),'Qdelta',con_vector(9+k-m,9+k-m,0), ...
                                %'Qc>Qdelta',con_vector(9+k-m,7+k-m,9+k-m),'Qc<Qdelta',con_vector(9+k-m,9+k-m,7+k-m), ...
                                %'Outcome',con_vector(11+k-m,11+k-m,0),'PE',con_vector(13+k-m,13+k-m,0)...
                                 }';         
                        case '2'
                            inputs = {inputs{:}, ... %%this is yet unvalidated
                                'cue',con_vector(7-m,7-m,0),'Qchosen',con_vector(10+k-m,10+k-m,0), ...
                                'Shake+',con_vector(13+k-m,13+k-m,0), 'S-',con_vector(19+k-m,19+k-m,0), ...
                                'S+>S-',con_vector(19+k-m,13+k-m,19+k-m), 'S+<S-',con_vector(19+k-m,19+k-m,13+k-m), 'S+&S-',con_vector(19+k-m,[13+k-m 19+k-m],0 ),...
                                'PE+',con_vector(16+k-m,16+k-m,0), 'PE-',con_vector(22+k-m,22+k-m,0), ...
                                'PE+>PE-',con_vector(22+k-m,16+k-m,22+k-m),'PE+<PE-',con_vector(22+k-m,22+k-m,16+k-m), 'PE+>PE-',con_vector(22+k-m,[16+k-m 22+k-m], 0) ... 
                                }'; 
                    end
                case 'Qboth_single_regressor_Qs_last'
                    switch derivatives(2)
                        case '1'
                            inputs = {inputs{:}, ...
                                'cue',con_vector(9,9,0),'Qchosen',con_vector(11+k,11+k,0),'Qdelta',con_vector(13+k,13+k,0), ...
                                'Qc>Qdelta',con_vector(13+k,11+k,13+k),'Qc<Qdelta',con_vector(13+k,13+k,11+k), ...
                                'Outcome',con_vector(5,5,0),'PE',con_vector(7,7,0)...
                                 }';         
                        case '2'
                            inputs = {inputs{:}, ...
                                'cue',con_vector(13,13,0),'Qchosen',con_vector(16+k,16+k,0),'Qdelta',con_vector(19+k,19+k,0), ...
                                'Qc>Qdelta',con_vector(19+k,16+k,19+k),'Qc<Qdelta',con_vector(19+k,19+k,16+k), ...
                                'Outcome',con_vector(7,7,0),'PE',con_vector(10,10,0)...
                                }'; 
                    end
                    if contains(prefix,'side')
                        inputs = {inputs{:}, 'side (left/right cue)', con_vector(2+j,2+j,0)}';
                    end
                case 'Qboth_single_regressor_PE_last'
                    switch derivatives(2)
                        case '1'
                            inputs = {inputs{:}, ...
                                'cue',con_vector(5-m,5-m,0),'Qchosen',con_vector(7+k-m,7+k-m,0),'Qdelta',con_vector(9+k-m,9+k-m,0), ...
                                'Qc>Qdelta',con_vector(9+k-m,7+k-m,9+k-m),'Qc<Qdelta',con_vector(9+k-m,9+k-m,7+k-m), ...
                                'Outcome',con_vector(11+k-m,11+k-m,0),'PE',con_vector(13+k-m,13+k-m,0)...
                                 }';         
                        case '2'
                            inputs = {inputs{:}, ...
                                'cue',con_vector(7-m,7-m,0),'Qchosen',con_vector(10+k-m,10+k-m,0),'Qdelta',con_vector(13+k-m,13+k-m,0), ...
                                'Qc>Qdelta',con_vector(13+k-m,10+k-m,13+k-m),'Qc<Qdelta',con_vector(13+k-m,13+k-m,10+k-m), ...
                                'Outcome',con_vector(16+k-m,16+k-m,0),'PE',con_vector(19+k-m,19+k-m,0)...
                                }'; 
                            if contains(prefix,'reversed_PE')
                                 inputs = {inputs{:}, ...
                                'cue',con_vector(7-m,7-m,0),'Qchosen',con_vector(10+k-m,10+k-m,0),'Qdelta',con_vector(13+k-m,13+k-m,0), ...
                                'Qc>Qdelta',con_vector(13+k-m,10+k-m,13+k-m),'Qc<Qdelta',con_vector(13+k-m,13+k-m,10+k-m), ...
                                'Outcome',con_vector(16+k-m,16+k-m,0),'1-PE',con_vector(19+k-m,19+k-m,0)...
                                }'; 
                            end
                    end
                    if contains(prefix,'side')
                        %inputs = {inputs{:}, 'side (left/right cue)' ,con_vector(2+j-m,2+j-m,0)}'; this is for uncorrected order
                         inputs = {inputs{:}, 'side (left/right cue)' ,con_vector(4+3*j-m,4+3*j-m,0)}';
                    end
                case 'Qboth_sided_PE_last'
                    switch derivatives(2)
                        case '1'
    
                            if contains(prefix, 'Qdelta')
                                inputs = {inputs{:}, ...
                                    'cue',con_vector(5-m,5-m,0),'Qchosen',con_vector(7+k-m,7+k-m,0),'Qdelta',con_vector(9+k-m,9+k-m,0), ...
                                    'Qc>Qdelta',con_vector(9+k-m,7+k-m,9+k-m),'Qc<Qdelta',con_vector(9+k-m,9+k-m,7+k-m), ...
                                    'Pos_Outcome',con_vector(11+k-m,11+k-m,0),'Pos_PE',con_vector(13+k-m,13+k-m,0),...
                                    'Neg_Outcome',con_vector(15+k-m,15+k-m,0),'Neg_PE',con_vector(15+k-m,15+k-m,0),... 
                                    'Pos_PE>neg_PE', con_vector(13+k-m,19+k-m,13+k-m), 'Pos_PE<neg_PE',con_vector(15+k-m,15+k-m,13+k-m),...
                                    'both PEs',  con_vector(15+k-m,[13+k-m 15+k-m],0)...
                                    }';   
                            elseif contains(prefix, 'Qboth')
                                inputs = {inputs{:}, ...
                                    'cue',con_vector(5-m,5-m,0),'Qchosen',con_vector(7+k-m,7+k-m,0),'Qunchosen',con_vector(9+k-m,9+k-m,0), ...
                                    'Qc>Qunchosen',con_vector(9+k-m,7+k-m,9+k-m),'Qc<Qunchosen',con_vector(9+k-m,9+k-m,7+k-m), ...
                                    'Pos_Outcome',con_vector(11+k-m,11+k-m,0),'Pos_PE',con_vector(13+k-m,13+k-m,0),...
                                    'Neg_Outcome',con_vector(15+k-m,15+k-m,0),'Neg_PE',con_vector(15+k-m,15+k-m,0),... 
                                    'Pos_PE>neg_PE', con_vector(13+k-m,19+k-m,13+k-m), 'Pos_PE<neg_PE',con_vector(15+k-m,15+k-m,13+k-m),...
                                    'both PEs',  con_vector(15+k-m,[13+k-m 15+k-m],0)...
                                    }'; 
                            end
                        case '2'
                            if contains(prefix, 'Qdelta')
                                inputs = {inputs{:}, ...
                                    'cue',con_vector(7-m,7-m,0),'Qchosen',con_vector(10+k-m,10+k-m,0),'Qdelta',con_vector(13+k-m,13+k-m,0), ...
                                    'Qc>Qdelta',con_vector(13+k-m,10+k-m,13+k-m),'Qc<Qdelta',con_vector(13+k-m,13+k-m,10+k-m), ...
                                     'Pos_Outcome',con_vector(16+k-m,16+k-m,0),'Pos_PE',con_vector(19+k-m,19+k-m,0),...
                                    'Neg_Outcome',con_vector(22+k-m,22+k-m,0),'Neg_PE',con_vector(25+k-m,25+k-m,0),... 
                                     'Pos_PE>neg_PE', con_vector(25+k-m,19+k-m,25+k-m), 'Pos_PE<neg_PE',con_vector(25+k-m,25+k-m,19+k-m),...
                                     'both PEs',  con_vector(25+k-m,[19+k-m 25+k-m],0)...
                                    }'; 
                            elseif contains(prefix, 'Qboth')
                                inputs = {inputs{:}, ...
                                      'cue',con_vector(7-m,7-m,0),'Qchosen',con_vector(10+k-m,10+k-m,0),'Qunchosen',con_vector(13+k-m,13+k-m,0), ...
                                    'Qc>Qunchosen',con_vector(13+k-m,10+k-m,13+k-m),'Qc<Qunchosen',con_vector(13+k-m,13+k-m,10+k-m), ...
                                     'Pos_Outcome',con_vector(16+k-m,16+k-m,0),'Pos_PE',con_vector(19+k-m,19+k-m,0),...
                                    'Neg_Outcome',con_vector(22+k-m,22+k-m,0),'Neg_PE',con_vector(25+k-m,25+k-m,0),... 
                                     'Pos_PE>neg_PE', con_vector(25+k-m,19+k-m,25+k-m), 'Pos_PE<neg_PE',con_vector(25+k-m,25+k-m,19+k-m),...
                                     'both PEs',  con_vector(25+k-m,[19+k-m 25+k-m],0)...
                                    }'; 
                            end
                    end
                    if contains(prefix,'side')
                       inputs = {inputs{:}, 'side (left/right cue)' ,con_vector(4+3*j-m,4+3*j-m,0)}';
                    end

            end
        case 'transfer'
            jobfile = ['FPST_1st_results_job_' sequence derivatives '_diff.m'];
            switch model
                case 'chooseavoid_3pm'
                    jobfile = ['FPST_1st_results_job_' sequence derivatives '_diff2.m'];
                    inputs = {inputs{:}, ...
                        'Cues',con_vector(4,4,0), 'Qchosen choose A', con_vector(7,7,0), ...
                        'Qchosen avoid B', con_vector(10,10,0), 'Qchosen others', con_vector(13,13,0),...
                        'chooseA > avoidB',con_vector(10,7,10), 'chooseA < avoidB',con_vector(10,10,7), ...
                        'no_interest', con_vector(13,13,0), 'choose A + avoid B > non intereset', con_vector(13,[7 10],13), ...
                         'avoid B > choose A + non intereset', con_vector(13,10,[7 13]) ...
                        }';
                case 'chooseavoid_noQ'
                    %didn't directly delete the Qchosen but repeated the
                    %previous contrast to workaround 4643
                    inputs = {inputs{:}, ...
                        'choose A',con_vector(4,4,0), 'all cues', con_vector(16,[4 10 16],0), ...
                        'avoid B', con_vector(10,10,0), 'avoid B again', con_vector(10,10,0),...
                        'chooseA > avoidB',con_vector(10,4,10), 'chooseA < avoidB',con_vector(10,10,4), ...
                        'no_interest', con_vector(16,16,0), 'choose A + avoid B > non intereset', con_vector(16,[4 10],16) ...
                        %'all cues', con_vector(16,[4 10 16],0) ...
                        }';
                 case 'A_B_overOthers'
                    %copy of chooseavoid_noQ because I'm lazy
                    inputs = {inputs{:}, ...
                        'choose A',con_vector(4,4,0), 'choose A again', con_vector(4,4,0), ...
                        'avoid B', con_vector(10,10,0), 'avoid B again', con_vector(10,10,0),...
                        'chooseA > avoidB',con_vector(10,4,10), 'chooseA < avoidB',con_vector(10,10,4), ...
                        'no_interest', con_vector(16,16,0), 'choose A + avoid B > non intereset', con_vector(16,[4 10],16) ...
                        }';   

                case 'chooseavoid'
                    inputs = {inputs{:}, ...
                        'choose A',con_vector(4,4,0), 'Qchosen choose A', con_vector(7,7,0), ...
                        'avoid B', con_vector(10,10,0), 'Qchosen avoid B', con_vector(13,13,0),...
                        'chooseA > avoidB',con_vector(10,4,10), 'chooseA < avoidB',con_vector(10,10,4), ...
                        'no_interest', con_vector(16,16,0), 'choose A + avoid B > non intereset', con_vector(16,[4 10],16), ...
                        'all cues', con_vector(16,[4 10 16],0) ...
                        }';
                case 'winlose'
                    inputs = {inputs{:}, ...
                        'winwin',con_vector(4,4,0), 'Qchosen winwin', con_vector(7,7,0), ...
                        'loselose', con_vector(10,10,0), 'Qchosen loselose', con_vector(13,13,0),...
                        'winwin>loselose',con_vector(10,4,10), 'winwin<loselose',con_vector(10,10,4), ...
                        'no_interest', con_vector(16,16,0), 'winwin + loselose > non intereset', con_vector(16,[4 10],16) ...
                        }';
                case {'Vrelative','Qchosen','QchosenTest','Vstate','Vsoftmax'}
                    inputs = {inputs{:}, ...
                        'cue', con_vector(4,4,0), model, con_vector(7,7,0) ...
                        }';
                    %needs a different job because 1st level structure is different
                    jobfile = ['FPST_1st_results_job_' sequence derivatives '_Qchosen.m'];
                case {'shiner'}
                    inputs = {inputs{:}, ...
                        'Correct trials', con_vector(1,1,0), 'Qchosen correct trials', con_vector(4,4,0), ...
                        'Incorrect trials', con_vector(7,7,0), 'Qchosen incorrect trials', con_vector(10,10,0), ...
                        'motor response', con_vector(13,13,0), 'fixation cross', con_vector(16,16,0), ...
                        }';
                    %needs a different job because 1st level structure is different
                    jobfile = ['FPST_1st_results_job_' sequence derivatives '_shiner.m'];
            end
    end

    jobs = repmat(jobfile, 1, 1);
    %% process  all input images for the current subject
    clear matlabbatch
    spm_jobman('serial', jobs, '', inputs{:});
end