function [outcomes] = pseudorandomize(cues, contingency, repetitions, binsize)
    outcomes = zeros(repetitions,numel(cues));
    for i=1:(repetitions/binsize)
        for j=1:(numel(cues))
                numwins = contingency(j)*binsize;
                outcomes((1+(i-1)*binsize):(numwins+(i-1)*binsize),j) = 1;
                rng('shuffle');                       % ensure random is random
                randomorder = randperm(binsize)+(i-1)*binsize+(j-1)*repetitions;          % create a random order of numel(binsize) elements, needs to match bin index in matrix
                outcomes((1+(i-1)*binsize):(binsize+(i-1)*binsize),j) = outcomes(randomorder); %reorder current bin
        end
    end
    %add last events in case repetition number doesn't divide by binsize
    rest = mod(repetitions,binsize);
    lastrow = repetitions - rest;
    if rest
            for j=1:(numel(cues))
                numwins = round(contingency(j)*rest);
                outcomes((lastrow+1):(lastrow+numwins),j) = 1; %add wins to end of column 
                rng('shuffle');                       % ensure random is random
                randomorder = randperm(rest)+j*repetitions - rest;          % create a random order of numel(binsize) elements, needs to match bin index in matrix
                outcomes((lastrow+1):(lastrow+rest),j) = outcomes(randomorder); %reorder current bin
            end
    end
end

%{
%%the indexes of the 2D matrix looks like this (for 40*2 repetitions), when addressed as single
%%row vector
%this explains the randperm(binsize)+(i-1)*binsize+(j-1)*repetitions;  
1 81 161 241 321 401
2 82 162 242 322 402
3 83 163 243 323 403
4 84 164 244 324 404
5 85 165 245 325 405
6 86 166 246 326 406
7 87 167 247 327 407
8 88 168 248 328 408
9 89 169 249 329 409
10 90 170 250 330 410
11 91 171 251 331 411
12 92 172 252 332 412
13 93 173 253 333 413
14 94 174 254 334 414
15 95 175 255 335 415
16 96 176 256 336 416
17 97 177 257 337 417
18 98 178 258 338 418
19 99 179 259 339 419
20 100 180 260 340 420
21 101 181 261 341 421
22 102 182 262 342 422
23 103 183 263 343 423
24 104 184 264 344 424
25 105 185 265 345 425
26 106 186 266 346 426
27 107 187 267 347 427
28 108 188 268 348 428
29 109 189 269 349 429
30 110 190 270 350 430
31 111 191 271 351 431
32 112 192 272 352 432
33 113 193 273 353 433
34 114 194 274 354 434
35 115 195 275 355 435
36 116 196 276 356 436
37 117 197 277 357 437
38 118 198 278 358 438
39 119 199 279 359 439
40 120 200 280 360 440
41 121 201 281 361 441
42 122 202 282 362 442
43 123 203 283 363 443
44 124 204 284 364 444
45 125 205 285 365 445
46 126 206 286 366 446
47 127 207 287 367 447
48 128 208 288 368 448
49 129 209 289 369 449
50 130 210 290 370 450
51 131 211 291 371 451
52 132 212 292 372 452
53 133 213 293 373 453
54 134 214 294 374 454
55 135 215 295 375 455
56 136 216 296 376 456
57 137 217 297 377 457
58 138 218 298 378 458
59 139 219 299 379 459
60 140 220 300 380 460
61 141 221 301 381 461
62 142 222 302 382 462
63 143 223 303 383 463
64 144 224 304 384 464
65 145 225 305 385 465
66 146 226 306 386 466
67 147 227 307 387 467
68 148 228 308 388 468
69 149 229 309 389 469
70 150 230 310 390 470
52 146 240 334 428 522
53 147 241 335 429 523
54 148 242 336 430 524
55 149 243 337 431 525
56 150 244 338 432 526
57 151 245 339 433 527
58 152 246 340 434 528
59 153 247 341 435 529
60 154 248 342 436 530
61 155 249 343 437 531
62 156 250 344 438 532
63 157 251 345 439 533
64 158 252 346 440 534
65 159 253 347 441 535
66 160 254 348 442 536
67 161 255 349 443 537
68 162 256 350 444 538
69 163 257 351 445 539
70 164 258 352 446 540
71 165 259 353 447 541
72 166 260 354 448 542
73 167 261 355 449 543
74 168 262 356 450 544
75 169 263 357 451 545
76 170 264 358 452 546
77 171 265 359 453 547
78 172 266 360 454 548
79 173 267 361 455 549
80 174 268 362 456 550
81 175 269 363 457 551
82 176 270 364 458 552
83 177 271 365 459 553
84 178 272 366 460 554
85 179 273 367 461 555
86 180 274 368 462 556
87 181 275 369 463 557
88 182 276 370 464 558
89 183 277 371 465 559
90 184 278 372 466 560
91 185 279 373 467 561
92 186 280 374 468 562
93 187 281 375 469 563
94 188 282 376 470 564
%}
